<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Mazouri]]></title>
  <subtitle><![CDATA[我的博客]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://mazouri.me/"/>
  <updated>2016-01-25T08:29:49.000Z</updated>
  <id>http://mazouri.me/</id>
  
  <author>
    <name><![CDATA[Mazouri]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[test cafe]]></title>
    <link href="http://mazouri.me/2016/01/25/test-cafe/"/>
    <id>http://mazouri.me/2016/01/25/test-cafe/</id>
    <published>2016-01-25T08:29:49.000Z</published>
    <updated>2016-01-25T08:29:49.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeakCanary-让内存泄露无所遁形]]></title>
    <link href="http://mazouri.me/2016/01/25/LeakCanary-%E8%AE%A9%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E6%97%A0%E6%89%80%E9%81%81%E5%BD%A2/"/>
    <id>http://mazouri.me/2016/01/25/LeakCanary-让内存泄露无所遁形/</id>
    <published>2016-01-25T02:25:58.000Z</published>
    <updated>2016-01-25T05:45:52.000Z</updated>
    <content type="html"><![CDATA[<h2 id="LeakCanary"><a href="#LeakCanary" class="headerlink" title="LeakCanary"></a>LeakCanary</h2><p>LeakCanary是一个检测Android和Java内存泄露的开源库。</p>
<a id="more"></a>
<h2 id="u5F00_u59CB_u4F7F_u7528"><a href="#u5F00_u59CB_u4F7F_u7528" class="headerlink" title="开始使用"></a>开始使用</h2><p>在你<code>build.gradle</code>中添加如下依赖：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">   debugCompile <span class="string">'com.squareup.leakcanary:leakcanary-android:1.3.1'</span> <span class="comment">// or 1.4-beta1</span></span><br><span class="line">   releaseCompile <span class="string">'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1'</span> <span class="comment">// or 1.4-beta1</span></span><br><span class="line">   testCompile <span class="string">'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1'</span> <span class="comment">// or 1.4-beta1</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>
<p>修改你的<code>Application</code>类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate();</span><br><span class="line">    LeakCanary.install(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>这样就可以了！</strong>在你编译时如果某个activity发生内存泄露的话，LeakCanary就会弹出一个类似下图的通知。</p>
<img src="/2016/01/25/LeakCanary-让内存泄露无所遁形/leakcanary1.png" alt="leakcanary1.png" title="">
<h2 id="u4E3A_u4EC0_u4E48_u6211_u4EEC_u8981_u4F7F_u7528LeakCanary_u5462_uFF1F"><a href="#u4E3A_u4EC0_u4E48_u6211_u4EEC_u8981_u4F7F_u7528LeakCanary_u5462_uFF1F" class="headerlink" title="为什么我们要使用LeakCanary呢？"></a>为什么我们要使用LeakCanary呢？</h2><p>问的好！为了更严谨的回答这个问题，我们专门写了一篇博客<a href="https://corner.squareup.com/2015/05/leak-canary.html" target="_blank" rel="external">LeakCanary: Detect all memory leaks!</a></p>
<h2 id="u5982_u4F55_u4F7F_u7528LeakCanary"><a href="#u5982_u4F55_u4F7F_u7528LeakCanary" class="headerlink" title="如何使用LeakCanary"></a>如何使用LeakCanary</h2><p>我们使用<code>RefWatcher</code>去监控那些本该被回收掉的对象(GCed):<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RefWatcher refWatcher = &#123;...&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// We expect schrodingerCat to be gone soon (or not), let's watch it.</span></span><br><span class="line">refWatcher.watch(schrodingerCat);</span><br></pre></td></tr></table></figure></p>
<p><code>LeakCanary.install()</code>返回的是一个预定义的<code>RefWatcher</code>。同时，它也会启用一个<code>ActivityRefWatcher</code>来检测一个activity在调用<code>Activity.onDestroy()</code>后是否发生内存泄露。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RefWatcher <span class="title">getRefWatcher</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    ExampleApplication application = (ExampleApplication) context.getApplicationContext();</span><br><span class="line">    <span class="keyword">return</span> application.refWatcher;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> RefWatcher refWatcher;</span><br><span class="line"></span><br><span class="line">  <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate();</span><br><span class="line">    refWatcher = LeakCanary.install(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>当然，你可以使用<code>RefWatcher</code>去监控Fragment的内存泄露：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    RefWatcher refWatcher = ExampleApplication.getRefWatcher(getActivity());</span><br><span class="line">    refWatcher.watch(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="LeakCanary_u7684_u5DE5_u4F5C_u673A_u5236"><a href="#LeakCanary_u7684_u5DE5_u4F5C_u673A_u5236" class="headerlink" title="LeakCanary的工作机制"></a>LeakCanary的工作机制</h2><ol>
<li><code>RefWatcher.watch()</code>创建一个<a href="https://github.com/square/leakcanary/blob/master/leakcanary-watcher/src/main/java/com/squareup/leakcanary/KeyedWeakReference.java" target="_blank" rel="external">KeyedWeakReference</a>到被监控的对象；</li>
<li>然后，会在后台检查引用是否被清除，如果没有，则会出发GC；</li>
<li>如果引用仍未被清除，就会将堆内存转储到一个.hprof文件并存放在app文件系统中；</li>
<li><code>HeapAnalyzerService</code>在另外的进程中启动，<code>HeapAnalyzer</code>使用<a href="https://github.com/square/haha" target="_blank" rel="external">HAHA</a>解析转储的.hprof文件；</li>
<li>因为唯一的reference key，<code>HeapAnalyzer</code>会找到<code>KeyedWeakReference</code>,并定位到泄露的引用；</li>
<li><code>HeapAnalyzer</code>计算到<code>GC roots</code>的最短强引用路径，来确定是否发生泄露。如果是，就会创建一个引发泄露的引用链；</li>
<li>结果会被传送给App进程中的<code>DisplayLeakService</code>，并且会显示内存泄露的通知。</li>
</ol>
<h2 id="u6211_u662F_u600E_u6837_u62F7_u8D1Dleak_trace_u7684"><a href="#u6211_u662F_u600E_u6837_u62F7_u8D1Dleak_trace_u7684" class="headerlink" title="我是怎样拷贝leak trace的"></a>我是怎样拷贝leak trace的</h2><ol>
<li>你可以在Logcat中看到leak trace：<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">In</span> com.example.leakcanary:<span class="number">1.0</span>:<span class="number">1</span> com.example.leakcanary.<span class="type">MainActivity</span> has leaked:</span><br><span class="line">* <span class="type">GC</span> <span class="type">ROOT</span> thread java.lang.<span class="type">Thread</span>.&lt;<span class="type">Java</span> <span class="type">Local</span>&gt; (named <span class="symbol">'AsyncTask</span> #<span class="number">1</span>')</span><br><span class="line">* references com.example.leakcanary.<span class="type">MainActivity</span>$<span class="number">3.</span><span class="keyword">this</span>$<span class="number">0</span> (anonymous <span class="class"><span class="keyword">class</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">android</span>.<span class="title">os</span>.<span class="title">AsyncTask</span>)</span><br><span class="line"></span>* leaks com.example.leakcanary.<span class="type">MainActivity</span> instance</span><br><span class="line"></span><br><span class="line">* <span class="type">Reference</span> <span class="type">Key</span>: e71f3bf5-d786-<span class="number">4145</span>-<span class="number">8539</span>-<span class="number">584</span>afaecad1d</span><br><span class="line">* <span class="type">Device</span>: <span class="type">Genymotion</span> generic <span class="type">Google</span> <span class="type">Nexus</span> <span class="number">6</span> - <span class="number">5.1</span><span class="number">.0</span> - <span class="type">API</span> <span class="number">22</span> - <span class="number">1440</span>x2560 vbox86p</span><br><span class="line">* <span class="type">Android</span> <span class="type">Version</span>: <span class="number">5.1</span> <span class="type">API</span>: <span class="number">22</span></span><br><span class="line">* <span class="type">Durations</span>: watch=<span class="number">5086</span>ms, gc=<span class="number">110</span>ms, heap dump=<span class="number">435</span>ms, analysis=<span class="number">2086</span>ms</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>你也可以通过actionbar上的分享功能分享leak trace：</p>
<h2 id="u6211_u662F_u5982_u4F55_u89E3_u51B3_u5185_u5B58_u6CC4_u9732_u95EE_u9898_u7684"><a href="#u6211_u662F_u5982_u4F55_u89E3_u51B3_u5185_u5B58_u6CC4_u9732_u95EE_u9898_u7684" class="headerlink" title="我是如何解决内存泄露问题的"></a>我是如何解决内存泄露问题的</h2><p>当你有了leak trace后，找到不应该存在的引用，然后弄清楚为什么这个引用仍然存在。<br>最常见的造成内存泄露的原因有下面几种情况：</p>
<blockquote>
<p>注册没取消（没有unregistered）<br>资源对象没关闭（Cursor没调用close()）<br>匿名类持有外部类的引用，造成context泄露</p>
</blockquote>
<p>如果你没法在代码中发现问题，可以到 Stack Overflow 中创建一个 question，注意使用leakcanary标签。 <a href="http://stackoverflow.com/questions/tagged/leakcanary" target="_blank" rel="external">Stack Overflow question</a></p>
<h2 id="SDK_u5BFC_u81F4_u7684_u5185_u5B58_u6CC4_u9732_u95EE_u9898"><a href="#SDK_u5BFC_u81F4_u7684_u5185_u5B58_u6CC4_u9732_u95EE_u9898" class="headerlink" title="SDK导致的内存泄露问题"></a>SDK导致的内存泄露问题</h2><p>很多已知的内存泄露问题被开源项目和ROM厂商逐渐解决。当这类内存泄露问题发生时，作为app开发者来说，能做的很有限，因此，LeakCanary有一个内置的忽略已知Android泄露问题的列表：<a href="https://github.com/square/leakcanary/blob/master/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidExcludedRefs.java" target="_blank" rel="external">AndroidExcludedRefs.java</a><br>如果你发现了新问题，你可以按如下几步创建一个<a href="https://github.com/square/leakcanary/issues/new" target="_blank" rel="external">issue</a>:</p>
<ol>
<li>提供完整的leak trace信息（包括reference key, device等）</li>
<li>阅读相应版本的Android源代码，找出问题产生的原因</li>
<li>检查最新Android版本是否也有此问题，看看是什么时候解决的</li>
<li>If it’s still happening, build a simple repro case</li>
<li>File an issue on <a href="http://b.android.com" target="_blank" rel="external">b.android.com</a> with the leak trace and the repro case</li>
<li>Create a PR in LeakCanary to update <code>AndroidExcludedRefs.java</code>. Optional: if you find a hack to clear that leak on previous versions of Android, feel free to document it</li>
</ol>
<p>这对最新发布的版本来说非常重要，你将有机会在早期帮助发现内存泄露问题，这将有益于整个Android社区。</p>
<h2 id="u9664_u4E86leak_trace"><a href="#u9664_u4E86leak_trace" class="headerlink" title="除了leak trace"></a>除了leak trace</h2><p>有时候，光有leak trace还不能解决问题，这时，你就要使用<a href="http://eclipse.org/mat/" target="_blank" rel="external">MAT</a> 或者 <a href="https://www.yourkit.com/" target="_blank" rel="external">YourKit</a>挖掘dump文件。<br>下面就来看看如何在dump文件中找出泄露的实例：</p>
<ol>
<li>查找所有的<code>com.squareup.leakcanary.KeyedWeakReference</code>实例</li>
<li>检查 key 字段</li>
<li>找出key字段与LeakCanary所报的reference key相同的KeyedWeakReference</li>
<li>该KeyedWeakReference中的referent字段就是泄露的对象</li>
<li>剩下的，就是动手修复了。最好是检查到 GC root 的最短强引用路径开始</li>
</ol>
<h2 id="u81EA_u5B9A_u4E49"><a href="#u81EA_u5B9A_u4E49" class="headerlink" title="自定义"></a>自定义</h2><h3 id="u81EA_u5B9A_u4E49_u5E76_u4F7F_u7528no-op_u4F9D_u8D56"><a href="#u81EA_u5B9A_u4E49_u5E76_u4F7F_u7528no-op_u4F9D_u8D56" class="headerlink" title="自定义并使用no-op依赖"></a>自定义并使用no-op依赖</h3><p>对于发布版本，<code>leakcanary-android-no-op</code>只有LeakCanary和RefWatcher类，如果你要自定义LeakCanary，请确保这种自定义只在调试版本中发生，因为可能会引用到leakcanary-android-no-op中不存在的类。<br>比方说，你在发布版本的<code>AndroidManifest.xml</code>中声明了ExampleApplication类，你的调试版本中声明了DebugExampleApplication继承自ExampleApplication：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RefWatcher <span class="title">getRefWatcher</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    ExampleApplication application = (ExampleApplication) context.getApplicationContext();</span><br><span class="line">    <span class="keyword">return</span> application.refWatcher;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> RefWatcher refWatcher;</span><br><span class="line"></span><br><span class="line">  <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate();</span><br><span class="line">    refWatcher = installLeakCanary();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> RefWatcher <span class="title">installLeakCanary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> RefWatcher.DISABLED;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DebugExampleApplication</span> <span class="keyword">extends</span> <span class="title">ExampleApplication</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">protected</span> RefWatcher <span class="title">installLeakCanary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	RefWatcher refWatcher = ? <span class="comment">// Build a customized RefWatcher</span></span><br><span class="line">    <span class="keyword">return</span> refWatcher;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样的话，除了<code>leakcanary-android-no-op</code>中存在的两个类外，你的发布代码中就不会有对LeakCanary的引用了。</p>
<h3 id="u56FE_u6807_u548C_u6807_u7B7E"><a href="#u56FE_u6807_u548C_u6807_u7B7E" class="headerlink" title="图标和标签"></a>图标和标签</h3><p>DisplayLeakActivity已经有了默认的图标和标签，不过你可以在app中替换下面几个资源文件：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">res/</span><br><span class="line">  drawable-hdpi/</span><br><span class="line">    __leak_canary_icon<span class="class">.png</span></span><br><span class="line">  drawable-mdpi/</span><br><span class="line">    __leak_canary_icon<span class="class">.png</span></span><br><span class="line">  drawable-xhdpi/</span><br><span class="line">    __leak_canary_icon<span class="class">.png</span></span><br><span class="line">  drawable-xxhdpi/</span><br><span class="line">    __leak_canary_icon<span class="class">.png</span></span><br><span class="line">  drawable-xxxhdpi/</span><br><span class="line">    __leak_canary_icon.png</span><br></pre></td></tr></table></figure></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">resources</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">string</span> <span class="attribute">name</span>=<span class="value">"__leak_canary_display_activity_label"</span>&gt;</span>MyLeaks<span class="tag">&lt;/<span class="title">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="u4FDD_u5B58leak_traces"><a href="#u4FDD_u5B58leak_traces" class="headerlink" title="保存leak traces"></a>保存leak traces</h3><p><code>DisplayLeakActivity</code>保存了 7 个 dump 文件和 leak trace，你可以在你的app中创建R.integer.__leak_canary_max_stored_leaks来覆盖默认值。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">resources</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">integer</span> <span class="attribute">name</span>=<span class="value">"__leak_canary_max_stored_leaks"</span>&gt;</span>20<span class="tag">&lt;/<span class="title">integer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">resources</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="LeakCanary"><a href="#LeakCanary" class="headerlink" title="LeakCanary"></a>LeakCanary</h2><p>LeakCanary是一个检测Android和Java内存泄露的开源库。</p>]]>
    
    </summary>
    
      <category term="Android" scheme="http://mazouri.me/tags/Android/"/>
    
      <category term="LeakCanary" scheme="http://mazouri.me/tags/LeakCanary/"/>
    
      <category term="内存泄露" scheme="http://mazouri.me/tags/%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/"/>
    
      <category term="内存泄露" scheme="http://mazouri.me/categories/%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/"/>
    
  </entry>
  
</feed>
